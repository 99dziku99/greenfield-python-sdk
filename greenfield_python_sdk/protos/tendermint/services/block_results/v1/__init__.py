# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: tendermint/services/block_results/v1/block_results.proto, tendermint/services/block_results/v1/block_results_service.proto
# plugin: python-betterproto
# This file has been @generated
from dataclasses import dataclass
from typing import TYPE_CHECKING, Dict, List, Optional

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .... import abci as ___abci__
from .... import types as ___types__

if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class GetBlockResultsRequest(betterproto.Message):
    height: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class GetLatestBlockResultsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetBlockResultsResponse(betterproto.Message):
    height: int = betterproto.int64_field(1)
    txs_results: List["___abci__.ExecTxResult"] = betterproto.message_field(2)
    finalize_block_events: List["___abci__.Event"] = betterproto.message_field(3)
    validator_updates: List["___abci__.ValidatorUpdate"] = betterproto.message_field(4)
    consensus_param_updates: "___types__.ConsensusParams" = betterproto.message_field(5)
    app_hash: bytes = betterproto.bytes_field(6)


class BlockResultsServiceStub(betterproto.ServiceStub):
    async def get_block_results(
        self,
        get_block_results_request: "GetBlockResultsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetBlockResultsResponse":
        return await self._unary_unary(
            "/tendermint.services.block_results.v1.BlockResultsService/GetBlockResults",
            get_block_results_request,
            GetBlockResultsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_block_results(
        self,
        get_latest_block_results_request: "GetLatestBlockResultsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetBlockResultsResponse":
        return await self._unary_unary(
            "/tendermint.services.block_results.v1.BlockResultsService/GetLatestBlockResults",
            get_latest_block_results_request,
            GetBlockResultsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class BlockResultsServiceBase(ServiceBase):
    async def get_block_results(self, get_block_results_request: "GetBlockResultsRequest") -> "GetBlockResultsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_latest_block_results(
        self, get_latest_block_results_request: "GetLatestBlockResultsRequest"
    ) -> "GetBlockResultsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_block_results(
        self,
        stream: "grpclib.server.Stream[GetBlockResultsRequest, GetBlockResultsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_block_results(request)
        await stream.send_message(response)

    async def __rpc_get_latest_block_results(
        self,
        stream: "grpclib.server.Stream[GetLatestBlockResultsRequest, GetBlockResultsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_latest_block_results(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/tendermint.services.block_results.v1.BlockResultsService/GetBlockResults": grpclib.const.Handler(
                self.__rpc_get_block_results,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBlockResultsRequest,
                GetBlockResultsResponse,
            ),
            "/tendermint.services.block_results.v1.BlockResultsService/GetLatestBlockResults": grpclib.const.Handler(
                self.__rpc_get_latest_block_results,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLatestBlockResultsRequest,
                GetBlockResultsResponse,
            ),
        }
